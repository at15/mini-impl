type token =
  | TYPE of (Support.Error.info)
  | INERT of (Support.Error.info)
  | LAMBDA of (Support.Error.info)
  | TTOP of (Support.Error.info)
  | IF of (Support.Error.info)
  | THEN of (Support.Error.info)
  | ELSE of (Support.Error.info)
  | TRUE of (Support.Error.info)
  | FALSE of (Support.Error.info)
  | BOOL of (Support.Error.info)
  | TBOT of (Support.Error.info)
  | LET of (Support.Error.info)
  | IN of (Support.Error.info)
  | FIX of (Support.Error.info)
  | LETREC of (Support.Error.info)
  | CASE of (Support.Error.info)
  | OF of (Support.Error.info)
  | AS of (Support.Error.info)
  | USTRING of (Support.Error.info)
  | UNIT of (Support.Error.info)
  | REF of (Support.Error.info)
  | UUNIT of (Support.Error.info)
  | RREF of (Support.Error.info)
  | TIMESFLOAT of (Support.Error.info)
  | SUCC of (Support.Error.info)
  | PRED of (Support.Error.info)
  | ISZERO of (Support.Error.info)
  | UFLOAT of (Support.Error.info)
  | SSOURCE of (Support.Error.info)
  | SSINK of (Support.Error.info)
  | NAT of (Support.Error.info)
  | UCID of (string Support.Error.withinfo)
  | LCID of (string Support.Error.withinfo)
  | INTV of (int Support.Error.withinfo)
  | FLOATV of (float Support.Error.withinfo)
  | STRINGV of (string Support.Error.withinfo)
  | APOSTROPHE of (Support.Error.info)
  | DQUOTE of (Support.Error.info)
  | ARROW of (Support.Error.info)
  | BANG of (Support.Error.info)
  | BARGT of (Support.Error.info)
  | BARRCURLY of (Support.Error.info)
  | BARRSQUARE of (Support.Error.info)
  | COLON of (Support.Error.info)
  | COLONCOLON of (Support.Error.info)
  | COLONEQ of (Support.Error.info)
  | COLONHASH of (Support.Error.info)
  | COMMA of (Support.Error.info)
  | DARROW of (Support.Error.info)
  | DDARROW of (Support.Error.info)
  | DOT of (Support.Error.info)
  | EOF of (Support.Error.info)
  | EQ of (Support.Error.info)
  | EQEQ of (Support.Error.info)
  | EXISTS of (Support.Error.info)
  | GT of (Support.Error.info)
  | HASH of (Support.Error.info)
  | LCURLY of (Support.Error.info)
  | LCURLYBAR of (Support.Error.info)
  | LEFTARROW of (Support.Error.info)
  | LPAREN of (Support.Error.info)
  | LSQUARE of (Support.Error.info)
  | LSQUAREBAR of (Support.Error.info)
  | LT of (Support.Error.info)
  | RCURLY of (Support.Error.info)
  | RPAREN of (Support.Error.info)
  | RSQUARE of (Support.Error.info)
  | SEMI of (Support.Error.info)
  | SLASH of (Support.Error.info)
  | STAR of (Support.Error.info)
  | TRIANGLE of (Support.Error.info)
  | USCORE of (Support.Error.info)
  | VBAR of (Support.Error.info)

open Parsing;;
let _ = parse_error;;
# 7 "parser.mly"
open Support.Error
open Support.Pervasive
open Syntax
# 83 "parser.ml"
let yytransl_const = [|
    0|]

let yytransl_block = [|
  257 (* TYPE *);
  258 (* INERT *);
  259 (* LAMBDA *);
  260 (* TTOP *);
  261 (* IF *);
  262 (* THEN *);
  263 (* ELSE *);
  264 (* TRUE *);
  265 (* FALSE *);
  266 (* BOOL *);
  267 (* TBOT *);
  268 (* LET *);
  269 (* IN *);
  270 (* FIX *);
  271 (* LETREC *);
  272 (* CASE *);
  273 (* OF *);
  274 (* AS *);
  275 (* USTRING *);
  276 (* UNIT *);
  277 (* REF *);
  278 (* UUNIT *);
  279 (* RREF *);
  280 (* TIMESFLOAT *);
  281 (* SUCC *);
  282 (* PRED *);
  283 (* ISZERO *);
  284 (* UFLOAT *);
  285 (* SSOURCE *);
  286 (* SSINK *);
  287 (* NAT *);
  288 (* UCID *);
  289 (* LCID *);
  290 (* INTV *);
  291 (* FLOATV *);
  292 (* STRINGV *);
  293 (* APOSTROPHE *);
  294 (* DQUOTE *);
  295 (* ARROW *);
  296 (* BANG *);
  297 (* BARGT *);
  298 (* BARRCURLY *);
  299 (* BARRSQUARE *);
  300 (* COLON *);
  301 (* COLONCOLON *);
  302 (* COLONEQ *);
  303 (* COLONHASH *);
  304 (* COMMA *);
  305 (* DARROW *);
  306 (* DDARROW *);
  307 (* DOT *);
    0 (* EOF *);
  308 (* EQ *);
  309 (* EQEQ *);
  310 (* EXISTS *);
  311 (* GT *);
  312 (* HASH *);
  313 (* LCURLY *);
  314 (* LCURLYBAR *);
  315 (* LEFTARROW *);
  316 (* LPAREN *);
  317 (* LSQUARE *);
  318 (* LSQUAREBAR *);
  319 (* LT *);
  320 (* RCURLY *);
  321 (* RPAREN *);
  322 (* RSQUARE *);
  323 (* SEMI *);
  324 (* SLASH *);
  325 (* STAR *);
  326 (* TRIANGLE *);
  327 (* USCORE *);
  328 (* VBAR *);
    0|]

let yylhs = "\255\255\
\001\000\001\000\002\000\002\000\002\000\005\000\005\000\006\000\
\006\000\006\000\006\000\008\000\008\000\008\000\008\000\008\000\
\008\000\008\000\008\000\008\000\008\000\008\000\004\000\004\000\
\007\000\007\000\003\000\003\000\003\000\003\000\003\000\003\000\
\003\000\003\000\003\000\010\000\010\000\010\000\010\000\010\000\
\010\000\010\000\010\000\010\000\012\000\012\000\012\000\009\000\
\009\000\014\000\014\000\015\000\015\000\013\000\013\000\017\000\
\017\000\016\000\016\000\016\000\016\000\016\000\016\000\016\000\
\016\000\016\000\016\000\016\000\018\000\018\000\019\000\019\000\
\020\000\020\000\011\000\011\000\021\000\000\000"

let yylen = "\002\000\
\001\000\003\000\001\000\002\000\002\000\002\000\002\000\001\000\
\002\000\002\000\002\000\003\000\001\000\001\000\001\000\001\000\
\003\000\003\000\001\000\001\000\001\000\001\000\000\000\002\000\
\003\000\001\000\001\000\006\000\006\000\006\000\006\000\006\000\
\008\000\004\000\003\000\001\000\002\000\002\000\002\000\002\000\
\003\000\002\000\002\000\002\000\003\000\003\000\001\000\000\000\
\001\000\001\000\003\000\003\000\001\000\003\000\001\000\001\000\
\003\000\003\000\004\000\001\000\001\000\001\000\003\000\007\000\
\001\000\001\000\001\000\001\000\000\000\001\000\001\000\003\000\
\003\000\001\000\001\000\003\000\007\000\002\000"

let yydefred = "\000\000\
\000\000\000\000\000\000\000\000\000\000\061\000\062\000\000\000\
\000\000\000\000\000\000\066\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\068\000\067\000\065\000\000\000\001\000\
\000\000\000\000\000\000\078\000\000\000\003\000\000\000\000\000\
\047\000\000\000\000\000\000\000\000\000\060\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\004\000\000\000\000\000\005\000\000\000\000\000\
\074\000\000\000\070\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\014\000\015\000\016\000\019\000\
\020\000\000\000\021\000\000\000\000\000\022\000\013\000\000\000\
\000\000\000\000\000\000\008\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\024\000\006\000\007\000\
\000\000\063\000\000\000\000\000\058\000\000\000\002\000\000\000\
\045\000\046\000\054\000\009\000\010\000\011\000\000\000\053\000\
\000\000\049\000\000\000\000\000\000\000\059\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\034\000\000\000\
\073\000\072\000\057\000\000\000\000\000\017\000\000\000\012\000\
\018\000\025\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\052\000\051\000\028\000\029\000\030\000\
\031\000\032\000\000\000\000\000\076\000\000\000\000\000\000\000\
\064\000\033\000\000\000\000\000\000\000"

let yydgoto = "\002\000\
\028\000\029\000\030\000\051\000\054\000\112\000\084\000\085\000\
\113\000\031\000\127\000\032\000\033\000\114\000\115\000\034\000\
\062\000\058\000\059\000\060\000\128\000"

let yysindex = "\012\000\
\001\000\000\000\215\254\234\254\154\002\000\000\000\000\235\254\
\053\255\251\254\154\002\000\000\053\255\053\255\053\255\053\255\
\053\255\236\254\222\254\000\000\000\000\000\000\053\255\000\000\
\204\002\154\002\254\254\000\000\223\254\000\000\240\002\238\254\
\000\000\018\255\123\003\250\254\252\254\000\000\033\255\245\254\
\246\254\238\254\255\254\027\255\238\254\025\003\238\254\238\254\
\238\254\123\003\000\000\123\003\154\002\000\000\238\254\000\255\
\000\000\237\254\000\000\003\255\248\254\247\254\008\255\001\000\
\245\002\238\254\249\254\123\003\000\000\000\000\000\000\000\000\
\000\000\068\003\000\000\068\003\068\003\000\000\000\000\107\003\
\123\003\107\003\253\254\000\000\007\255\123\003\123\003\154\002\
\154\002\154\002\123\003\240\254\238\254\000\000\000\000\000\000\
\154\002\000\000\204\002\154\002\000\000\154\002\000\000\053\255\
\000\000\000\000\000\000\000\000\000\000\000\000\020\255\000\000\
\002\255\000\000\019\255\009\255\013\255\000\000\068\003\024\255\
\026\255\071\255\066\255\069\255\032\255\052\255\000\000\035\255\
\000\000\000\000\000\000\036\255\123\003\000\000\107\003\000\000\
\000\000\000\000\154\002\154\002\154\002\154\002\154\002\154\002\
\038\255\240\254\087\255\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\095\255\079\255\000\000\123\003\154\002\062\255\
\000\000\000\000\072\255\245\002\053\255"

let yyrindex = "\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\054\255\201\255\000\000\000\000\000\000\000\000\000\000\
\055\255\000\000\000\000\000\000\000\000\000\000\137\002\036\000\
\000\000\151\255\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\103\000\000\000\000\000\170\000\000\000\237\000\048\001\
\115\001\000\000\000\000\000\000\000\000\000\000\182\001\101\002\
\000\000\000\000\000\000\060\255\067\255\000\000\000\000\000\000\
\000\000\249\001\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\070\255\
\000\000\076\255\000\000\000\000\063\255\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\060\002\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\049\003\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\217\254\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\057\003\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\176\255"

let yygindex = "\000\000\
\069\000\000\000\004\000\000\000\000\000\223\255\017\000\203\255\
\055\000\194\255\248\255\247\255\000\000\005\000\000\000\000\000\
\039\000\000\000\042\000\000\000\000\000"

let yytablesize = 1210
let yytable = "\042\000\
\024\000\083\000\104\000\045\000\046\000\047\000\048\000\049\000\
\039\000\052\000\036\000\040\000\001\000\055\000\044\000\050\000\
\094\000\053\000\095\000\035\000\108\000\066\000\109\000\110\000\
\050\000\105\000\106\000\043\000\057\000\061\000\063\000\050\000\
\067\000\064\000\107\000\068\000\093\000\086\000\088\000\087\000\
\089\000\090\000\091\000\092\000\098\000\119\000\126\000\116\000\
\037\000\041\000\099\000\097\000\120\000\121\000\003\000\101\000\
\096\000\125\000\100\000\102\000\006\000\007\000\118\000\133\000\
\026\000\134\000\135\000\137\000\026\000\026\000\026\000\026\000\
\012\000\136\000\139\000\026\000\140\000\141\000\142\000\026\000\
\026\000\143\000\026\000\144\000\145\000\038\000\020\000\021\000\
\022\000\156\000\147\000\122\000\123\000\124\000\066\000\026\000\
\026\000\026\000\026\000\148\000\129\000\165\000\057\000\061\000\
\158\000\132\000\146\000\159\000\026\000\025\000\026\000\160\000\
\026\000\026\000\026\000\027\000\163\000\026\000\069\000\026\000\
\023\000\164\000\026\000\071\000\161\000\026\000\026\000\026\000\
\026\000\026\000\048\000\056\000\103\000\048\000\026\000\138\000\
\117\000\157\000\131\000\149\000\130\000\000\000\150\000\151\000\
\152\000\153\000\154\000\155\000\000\000\000\000\000\000\000\000\
\055\000\000\000\000\000\066\000\055\000\055\000\055\000\055\000\
\000\000\000\000\162\000\055\000\000\000\000\000\000\000\055\000\
\000\000\000\000\055\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\077\000\077\000\055\000\
\055\000\055\000\055\000\000\000\077\000\000\000\000\000\000\000\
\077\000\000\000\000\000\000\000\055\000\000\000\055\000\000\000\
\000\000\055\000\060\000\000\000\000\000\055\000\000\000\055\000\
\060\000\060\000\055\000\000\000\000\000\055\000\055\000\055\000\
\000\000\055\000\060\000\000\000\060\000\000\000\055\000\077\000\
\000\000\000\000\000\000\000\000\000\000\000\000\077\000\000\000\
\000\000\060\000\060\000\060\000\060\000\000\000\000\000\077\000\
\077\000\000\000\077\000\000\000\000\000\000\000\060\000\077\000\
\000\000\000\000\000\000\060\000\000\000\000\000\000\000\000\000\
\000\000\060\000\003\000\004\000\060\000\005\000\000\000\060\000\
\006\000\007\000\000\000\060\000\008\000\000\000\009\000\010\000\
\011\000\000\000\000\000\000\000\012\000\013\000\000\000\000\000\
\014\000\015\000\016\000\017\000\000\000\000\000\000\000\000\000\
\018\000\019\000\020\000\021\000\022\000\036\000\000\000\000\000\
\023\000\036\000\036\000\036\000\036\000\000\000\000\000\000\000\
\036\000\000\000\000\000\000\000\036\000\000\000\000\000\036\000\
\000\000\025\000\000\000\000\000\026\000\000\000\000\000\027\000\
\000\000\000\000\000\000\000\000\036\000\036\000\036\000\036\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\036\000\000\000\036\000\000\000\000\000\000\000\000\000\
\000\000\000\000\036\000\000\000\036\000\000\000\000\000\036\000\
\000\000\000\000\036\000\036\000\036\000\000\000\036\000\000\000\
\038\000\000\000\000\000\036\000\038\000\038\000\038\000\038\000\
\000\000\000\000\000\000\038\000\000\000\000\000\000\000\038\000\
\000\000\000\000\038\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\038\000\
\038\000\038\000\038\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\038\000\000\000\038\000\000\000\
\000\000\000\000\000\000\000\000\000\000\038\000\000\000\038\000\
\000\000\000\000\038\000\000\000\000\000\038\000\038\000\038\000\
\000\000\038\000\000\000\039\000\000\000\000\000\038\000\039\000\
\039\000\039\000\039\000\000\000\000\000\000\000\039\000\000\000\
\000\000\000\000\039\000\000\000\000\000\039\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\039\000\039\000\039\000\039\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\039\000\
\000\000\039\000\000\000\000\000\000\000\000\000\000\000\000\000\
\039\000\000\000\039\000\000\000\000\000\039\000\000\000\000\000\
\039\000\039\000\039\000\000\000\039\000\000\000\042\000\000\000\
\000\000\039\000\042\000\042\000\042\000\042\000\000\000\000\000\
\000\000\042\000\000\000\000\000\000\000\042\000\000\000\000\000\
\042\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\042\000\042\000\042\000\
\042\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\042\000\000\000\042\000\000\000\000\000\000\000\
\000\000\000\000\000\000\042\000\000\000\042\000\000\000\000\000\
\042\000\000\000\000\000\042\000\042\000\042\000\000\000\042\000\
\000\000\043\000\000\000\000\000\042\000\043\000\043\000\043\000\
\043\000\000\000\000\000\000\000\043\000\000\000\000\000\000\000\
\043\000\000\000\000\000\043\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\043\000\043\000\043\000\043\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\043\000\000\000\043\000\
\000\000\000\000\000\000\000\000\000\000\000\000\043\000\000\000\
\043\000\000\000\000\000\043\000\000\000\000\000\043\000\043\000\
\043\000\000\000\043\000\000\000\044\000\000\000\000\000\043\000\
\044\000\044\000\044\000\044\000\000\000\000\000\000\000\044\000\
\000\000\000\000\000\000\044\000\000\000\000\000\044\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\044\000\044\000\044\000\044\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\044\000\000\000\044\000\000\000\000\000\000\000\000\000\000\000\
\000\000\044\000\000\000\044\000\000\000\000\000\044\000\000\000\
\000\000\044\000\044\000\044\000\000\000\044\000\000\000\040\000\
\000\000\000\000\044\000\040\000\040\000\040\000\040\000\000\000\
\000\000\000\000\040\000\000\000\000\000\000\000\040\000\000\000\
\000\000\040\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\040\000\040\000\
\040\000\040\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\040\000\000\000\040\000\000\000\000\000\
\000\000\000\000\000\000\000\000\040\000\000\000\040\000\000\000\
\000\000\040\000\000\000\000\000\040\000\040\000\040\000\000\000\
\040\000\000\000\037\000\000\000\000\000\040\000\037\000\037\000\
\037\000\037\000\000\000\000\000\000\000\037\000\000\000\000\000\
\000\000\037\000\000\000\000\000\037\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\037\000\037\000\037\000\037\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\037\000\000\000\
\037\000\000\000\000\000\000\000\000\000\000\000\000\000\037\000\
\000\000\037\000\000\000\000\000\037\000\000\000\000\000\037\000\
\037\000\037\000\000\000\037\000\000\000\041\000\000\000\000\000\
\037\000\041\000\041\000\041\000\041\000\000\000\000\000\000\000\
\041\000\000\000\000\000\000\000\041\000\000\000\000\000\041\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\041\000\041\000\041\000\041\000\
\000\000\000\000\000\000\000\000\000\000\000\000\060\000\000\000\
\000\000\041\000\000\000\041\000\060\000\060\000\000\000\000\000\
\000\000\000\000\041\000\000\000\041\000\000\000\060\000\041\000\
\060\000\000\000\041\000\041\000\041\000\000\000\041\000\000\000\
\000\000\000\000\000\000\041\000\000\000\060\000\060\000\060\000\
\060\000\000\000\000\000\000\000\000\000\000\000\027\000\027\000\
\000\000\000\000\060\000\000\000\060\000\027\000\000\000\060\000\
\000\000\027\000\000\000\003\000\004\000\060\000\005\000\000\000\
\060\000\006\000\007\000\060\000\060\000\008\000\000\000\009\000\
\010\000\011\000\000\000\000\000\000\000\012\000\013\000\000\000\
\000\000\014\000\015\000\016\000\017\000\000\000\000\000\000\000\
\027\000\000\000\038\000\020\000\021\000\022\000\000\000\027\000\
\000\000\023\000\000\000\000\000\000\000\000\000\000\000\000\000\
\027\000\027\000\000\000\027\000\000\000\003\000\004\000\000\000\
\005\000\000\000\025\000\006\000\007\000\026\000\000\000\008\000\
\027\000\009\000\010\000\011\000\000\000\000\000\000\000\012\000\
\013\000\000\000\000\000\014\000\015\000\016\000\017\000\000\000\
\000\000\000\000\000\000\000\000\056\000\020\000\021\000\022\000\
\000\000\003\000\000\000\023\000\000\000\000\000\003\000\006\000\
\007\000\000\000\000\000\000\000\006\000\007\000\000\000\000\000\
\000\000\000\000\009\000\012\000\025\000\000\000\000\000\026\000\
\012\000\013\000\027\000\000\000\014\000\015\000\016\000\017\000\
\038\000\020\000\021\000\022\000\000\000\038\000\020\000\021\000\
\022\000\000\000\003\000\000\000\023\000\065\000\000\000\000\000\
\006\000\007\000\000\000\000\000\000\000\000\000\000\000\000\000\
\025\000\000\000\000\000\026\000\012\000\025\000\027\000\000\000\
\026\000\000\000\000\000\027\000\000\000\000\000\035\000\035\000\
\000\000\038\000\020\000\021\000\022\000\035\000\075\000\075\000\
\000\000\035\000\000\000\000\000\000\000\075\000\000\000\069\000\
\000\000\075\000\000\000\067\000\000\000\070\000\071\000\000\000\
\000\000\025\000\000\000\000\000\026\000\000\000\072\000\027\000\
\000\000\073\000\000\000\000\000\000\000\000\000\000\000\075\000\
\035\000\000\000\078\000\079\000\000\000\000\000\000\000\035\000\
\075\000\000\000\000\000\000\000\000\000\000\000\069\000\075\000\
\035\000\035\000\000\000\035\000\070\000\071\000\000\000\000\000\
\075\000\075\000\000\000\075\000\080\000\072\000\069\000\081\000\
\073\000\074\000\082\000\000\000\070\000\071\000\075\000\076\000\
\077\000\078\000\079\000\111\000\000\000\072\000\000\000\000\000\
\073\000\074\000\000\000\000\000\000\000\000\000\075\000\076\000\
\077\000\078\000\079\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\080\000\000\000\000\000\081\000\000\000\
\000\000\082\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\080\000\000\000\000\000\081\000\000\000\
\000\000\082\000"

let yycheck = "\009\000\
\000\000\035\000\065\000\013\000\014\000\015\000\016\000\017\000\
\005\000\044\001\033\001\033\001\001\000\023\000\011\000\055\001\
\050\000\052\001\052\000\061\001\074\000\031\000\076\000\077\000\
\064\001\033\001\034\001\033\001\025\000\026\000\033\001\052\001\
\051\001\067\001\068\000\018\001\046\000\044\001\006\001\044\001\
\052\001\052\001\044\001\017\001\064\001\039\001\063\001\081\000\
\071\001\071\001\048\001\052\001\086\000\087\000\002\001\065\001\
\053\000\091\000\067\001\052\001\008\001\009\001\066\001\044\001\
\002\001\064\001\048\001\055\001\006\001\007\001\008\001\009\001\
\020\001\065\001\051\001\013\001\051\001\007\001\013\001\017\001\
\018\001\013\001\020\001\052\001\033\001\033\001\034\001\035\001\
\036\001\052\001\055\001\088\000\089\000\090\000\104\000\033\001\
\034\001\035\001\036\001\133\000\097\000\164\000\099\000\100\000\
\018\001\102\000\072\001\013\001\046\001\057\001\048\001\033\001\
\060\001\051\001\052\001\063\001\055\001\055\001\064\001\057\001\
\067\001\050\001\060\001\064\001\158\000\063\001\064\001\065\001\
\066\001\067\001\055\001\065\001\064\000\064\001\072\001\119\000\
\082\000\146\000\100\000\135\000\099\000\255\255\139\000\140\000\
\141\000\142\000\143\000\144\000\255\255\255\255\255\255\255\255\
\002\001\255\255\255\255\165\000\006\001\007\001\008\001\009\001\
\255\255\255\255\159\000\013\001\255\255\255\255\255\255\017\001\
\255\255\255\255\020\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\006\001\007\001\033\001\
\034\001\035\001\036\001\255\255\013\001\255\255\255\255\255\255\
\017\001\255\255\255\255\255\255\046\001\255\255\048\001\255\255\
\255\255\051\001\002\001\255\255\255\255\055\001\255\255\057\001\
\008\001\009\001\060\001\255\255\255\255\063\001\064\001\065\001\
\255\255\067\001\018\001\255\255\020\001\255\255\072\001\048\001\
\255\255\255\255\255\255\255\255\255\255\255\255\055\001\255\255\
\255\255\033\001\034\001\035\001\036\001\255\255\255\255\064\001\
\065\001\255\255\067\001\255\255\255\255\255\255\046\001\072\001\
\255\255\255\255\255\255\051\001\255\255\255\255\255\255\255\255\
\255\255\057\001\002\001\003\001\060\001\005\001\255\255\063\001\
\008\001\009\001\255\255\067\001\012\001\255\255\014\001\015\001\
\016\001\255\255\255\255\255\255\020\001\021\001\255\255\255\255\
\024\001\025\001\026\001\027\001\255\255\255\255\255\255\255\255\
\032\001\033\001\034\001\035\001\036\001\002\001\255\255\255\255\
\040\001\006\001\007\001\008\001\009\001\255\255\255\255\255\255\
\013\001\255\255\255\255\255\255\017\001\255\255\255\255\020\001\
\255\255\057\001\255\255\255\255\060\001\255\255\255\255\063\001\
\255\255\255\255\255\255\255\255\033\001\034\001\035\001\036\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\046\001\255\255\048\001\255\255\255\255\255\255\255\255\
\255\255\255\255\055\001\255\255\057\001\255\255\255\255\060\001\
\255\255\255\255\063\001\064\001\065\001\255\255\067\001\255\255\
\002\001\255\255\255\255\072\001\006\001\007\001\008\001\009\001\
\255\255\255\255\255\255\013\001\255\255\255\255\255\255\017\001\
\255\255\255\255\020\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\033\001\
\034\001\035\001\036\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\046\001\255\255\048\001\255\255\
\255\255\255\255\255\255\255\255\255\255\055\001\255\255\057\001\
\255\255\255\255\060\001\255\255\255\255\063\001\064\001\065\001\
\255\255\067\001\255\255\002\001\255\255\255\255\072\001\006\001\
\007\001\008\001\009\001\255\255\255\255\255\255\013\001\255\255\
\255\255\255\255\017\001\255\255\255\255\020\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\033\001\034\001\035\001\036\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\046\001\
\255\255\048\001\255\255\255\255\255\255\255\255\255\255\255\255\
\055\001\255\255\057\001\255\255\255\255\060\001\255\255\255\255\
\063\001\064\001\065\001\255\255\067\001\255\255\002\001\255\255\
\255\255\072\001\006\001\007\001\008\001\009\001\255\255\255\255\
\255\255\013\001\255\255\255\255\255\255\017\001\255\255\255\255\
\020\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\033\001\034\001\035\001\
\036\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\046\001\255\255\048\001\255\255\255\255\255\255\
\255\255\255\255\255\255\055\001\255\255\057\001\255\255\255\255\
\060\001\255\255\255\255\063\001\064\001\065\001\255\255\067\001\
\255\255\002\001\255\255\255\255\072\001\006\001\007\001\008\001\
\009\001\255\255\255\255\255\255\013\001\255\255\255\255\255\255\
\017\001\255\255\255\255\020\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\033\001\034\001\035\001\036\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\046\001\255\255\048\001\
\255\255\255\255\255\255\255\255\255\255\255\255\055\001\255\255\
\057\001\255\255\255\255\060\001\255\255\255\255\063\001\064\001\
\065\001\255\255\067\001\255\255\002\001\255\255\255\255\072\001\
\006\001\007\001\008\001\009\001\255\255\255\255\255\255\013\001\
\255\255\255\255\255\255\017\001\255\255\255\255\020\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\033\001\034\001\035\001\036\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\046\001\255\255\048\001\255\255\255\255\255\255\255\255\255\255\
\255\255\055\001\255\255\057\001\255\255\255\255\060\001\255\255\
\255\255\063\001\064\001\065\001\255\255\067\001\255\255\002\001\
\255\255\255\255\072\001\006\001\007\001\008\001\009\001\255\255\
\255\255\255\255\013\001\255\255\255\255\255\255\017\001\255\255\
\255\255\020\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\033\001\034\001\
\035\001\036\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\046\001\255\255\048\001\255\255\255\255\
\255\255\255\255\255\255\255\255\055\001\255\255\057\001\255\255\
\255\255\060\001\255\255\255\255\063\001\064\001\065\001\255\255\
\067\001\255\255\002\001\255\255\255\255\072\001\006\001\007\001\
\008\001\009\001\255\255\255\255\255\255\013\001\255\255\255\255\
\255\255\017\001\255\255\255\255\020\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\033\001\034\001\035\001\036\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\046\001\255\255\
\048\001\255\255\255\255\255\255\255\255\255\255\255\255\055\001\
\255\255\057\001\255\255\255\255\060\001\255\255\255\255\063\001\
\064\001\065\001\255\255\067\001\255\255\002\001\255\255\255\255\
\072\001\006\001\007\001\008\001\009\001\255\255\255\255\255\255\
\013\001\255\255\255\255\255\255\017\001\255\255\255\255\020\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\033\001\034\001\035\001\036\001\
\255\255\255\255\255\255\255\255\255\255\255\255\002\001\255\255\
\255\255\046\001\255\255\048\001\008\001\009\001\255\255\255\255\
\255\255\255\255\055\001\255\255\057\001\255\255\018\001\060\001\
\020\001\255\255\063\001\064\001\065\001\255\255\067\001\255\255\
\255\255\255\255\255\255\072\001\255\255\033\001\034\001\035\001\
\036\001\255\255\255\255\255\255\255\255\255\255\006\001\007\001\
\255\255\255\255\046\001\255\255\048\001\013\001\255\255\051\001\
\255\255\017\001\255\255\002\001\003\001\057\001\005\001\255\255\
\060\001\008\001\009\001\063\001\064\001\012\001\255\255\014\001\
\015\001\016\001\255\255\255\255\255\255\020\001\021\001\255\255\
\255\255\024\001\025\001\026\001\027\001\255\255\255\255\255\255\
\048\001\255\255\033\001\034\001\035\001\036\001\255\255\055\001\
\255\255\040\001\255\255\255\255\255\255\255\255\255\255\255\255\
\064\001\065\001\255\255\067\001\255\255\002\001\003\001\255\255\
\005\001\255\255\057\001\008\001\009\001\060\001\255\255\012\001\
\063\001\014\001\015\001\016\001\255\255\255\255\255\255\020\001\
\021\001\255\255\255\255\024\001\025\001\026\001\027\001\255\255\
\255\255\255\255\255\255\255\255\033\001\034\001\035\001\036\001\
\255\255\002\001\255\255\040\001\255\255\255\255\002\001\008\001\
\009\001\255\255\255\255\255\255\008\001\009\001\255\255\255\255\
\255\255\255\255\014\001\020\001\057\001\255\255\255\255\060\001\
\020\001\021\001\063\001\255\255\024\001\025\001\026\001\027\001\
\033\001\034\001\035\001\036\001\255\255\033\001\034\001\035\001\
\036\001\255\255\002\001\255\255\040\001\046\001\255\255\255\255\
\008\001\009\001\255\255\255\255\255\255\255\255\255\255\255\255\
\057\001\255\255\255\255\060\001\020\001\057\001\063\001\255\255\
\060\001\255\255\255\255\063\001\255\255\255\255\006\001\007\001\
\255\255\033\001\034\001\035\001\036\001\013\001\006\001\007\001\
\255\255\017\001\255\255\255\255\255\255\013\001\255\255\004\001\
\255\255\017\001\255\255\051\001\255\255\010\001\011\001\255\255\
\255\255\057\001\255\255\255\255\060\001\255\255\019\001\063\001\
\255\255\022\001\255\255\255\255\255\255\255\255\255\255\028\001\
\048\001\255\255\031\001\032\001\255\255\255\255\255\255\055\001\
\048\001\255\255\255\255\255\255\255\255\255\255\004\001\055\001\
\064\001\065\001\255\255\067\001\010\001\011\001\255\255\255\255\
\064\001\065\001\255\255\067\001\057\001\019\001\004\001\060\001\
\022\001\023\001\063\001\255\255\010\001\011\001\028\001\029\001\
\030\001\031\001\032\001\033\001\255\255\019\001\255\255\255\255\
\022\001\023\001\255\255\255\255\255\255\255\255\028\001\029\001\
\030\001\031\001\032\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\057\001\255\255\255\255\060\001\255\255\
\255\255\063\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\057\001\255\255\255\255\060\001\255\255\
\255\255\063\001"

let yynames_const = "\
  "

let yynames_block = "\
  TYPE\000\
  INERT\000\
  LAMBDA\000\
  TTOP\000\
  IF\000\
  THEN\000\
  ELSE\000\
  TRUE\000\
  FALSE\000\
  BOOL\000\
  TBOT\000\
  LET\000\
  IN\000\
  FIX\000\
  LETREC\000\
  CASE\000\
  OF\000\
  AS\000\
  USTRING\000\
  UNIT\000\
  REF\000\
  UUNIT\000\
  RREF\000\
  TIMESFLOAT\000\
  SUCC\000\
  PRED\000\
  ISZERO\000\
  UFLOAT\000\
  SSOURCE\000\
  SSINK\000\
  NAT\000\
  UCID\000\
  LCID\000\
  INTV\000\
  FLOATV\000\
  STRINGV\000\
  APOSTROPHE\000\
  DQUOTE\000\
  ARROW\000\
  BANG\000\
  BARGT\000\
  BARRCURLY\000\
  BARRSQUARE\000\
  COLON\000\
  COLONCOLON\000\
  COLONEQ\000\
  COLONHASH\000\
  COMMA\000\
  DARROW\000\
  DDARROW\000\
  DOT\000\
  EOF\000\
  EQ\000\
  EQEQ\000\
  EXISTS\000\
  GT\000\
  HASH\000\
  LCURLY\000\
  LCURLYBAR\000\
  LEFTARROW\000\
  LPAREN\000\
  LSQUARE\000\
  LSQUAREBAR\000\
  LT\000\
  RCURLY\000\
  RPAREN\000\
  RSQUARE\000\
  SEMI\000\
  SLASH\000\
  STAR\000\
  TRIANGLE\000\
  USCORE\000\
  VBAR\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Support.Error.info) in
    Obj.repr(
# 130 "parser.mly"
      ( fun ctx -> [],ctx )
# 661 "parser.ml"
               :  Syntax.context -> (Syntax.command list * Syntax.context) ))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'Command) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 :  Syntax.context -> (Syntax.command list * Syntax.context) ) in
    Obj.repr(
# 132 "parser.mly"
      ( fun ctx ->
          let cmd,ctx = _1 ctx in
          let cmds,ctx = _3 ctx in
          cmd::cmds,ctx )
# 673 "parser.ml"
               :  Syntax.context -> (Syntax.command list * Syntax.context) ))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'Term) in
    Obj.repr(
# 140 "parser.mly"
      ( fun ctx -> (let t = _1 ctx in Eval(tmInfo t,t)),ctx )
# 680 "parser.ml"
               : 'Command))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : string Support.Error.withinfo) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'TyBinder) in
    Obj.repr(
# 142 "parser.mly"
      ( fun ctx -> ((Bind(_1.i, _1.v, _2 ctx)), addname ctx _1.v) )
# 688 "parser.ml"
               : 'Command))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : string Support.Error.withinfo) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'Binder) in
    Obj.repr(
# 144 "parser.mly"
      ( fun ctx -> ((Bind(_1.i,_1.v,_2 ctx)), addname ctx _1.v) )
# 696 "parser.ml"
               : 'Command))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'Type) in
    Obj.repr(
# 149 "parser.mly"
      ( fun ctx -> VarBind (_2 ctx))
# 704 "parser.ml"
               : 'Binder))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'Term) in
    Obj.repr(
# 151 "parser.mly"
      ( fun ctx -> TmAbbBind(_2 ctx, None) )
# 712 "parser.ml"
               : 'Binder))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'ArrowType) in
    Obj.repr(
# 156 "parser.mly"
                ( _1 )
# 719 "parser.ml"
               : 'Type))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'AType) in
    Obj.repr(
# 158 "parser.mly"
      ( fun ctx -> TyRef(_2 ctx) )
# 727 "parser.ml"
               : 'Type))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'AType) in
    Obj.repr(
# 160 "parser.mly"
      ( fun ctx -> TySource(_2 ctx) )
# 735 "parser.ml"
               : 'Type))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'AType) in
    Obj.repr(
# 162 "parser.mly"
      ( fun ctx -> TySink(_2 ctx) )
# 743 "parser.ml"
               : 'Type))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'Type) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Support.Error.info) in
    Obj.repr(
# 167 "parser.mly"
           ( _2 )
# 752 "parser.ml"
               : 'AType))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string Support.Error.withinfo) in
    Obj.repr(
# 169 "parser.mly"
      ( fun ctx ->
          if isnamebound ctx _1.v then
            TyVar(name2index _1.i ctx _1.v, ctxlength ctx)
          else 
            TyId(_1.v) )
# 763 "parser.ml"
               : 'AType))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Support.Error.info) in
    Obj.repr(
# 175 "parser.mly"
      ( fun ctx -> TyTop )
# 770 "parser.ml"
               : 'AType))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Support.Error.info) in
    Obj.repr(
# 177 "parser.mly"
      ( fun ctx -> TyBool )
# 777 "parser.ml"
               : 'AType))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Support.Error.info) in
    Obj.repr(
# 179 "parser.mly"
      ( fun ctx -> TyBot )
# 784 "parser.ml"
               : 'AType))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'FieldTypes) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Support.Error.info) in
    Obj.repr(
# 181 "parser.mly"
      ( fun ctx ->
          TyRecord(_2 ctx 1) )
# 794 "parser.ml"
               : 'AType))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'FieldTypes) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Support.Error.info) in
    Obj.repr(
# 184 "parser.mly"
      ( fun ctx ->
          TyVariant(_2 ctx 1) )
# 804 "parser.ml"
               : 'AType))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Support.Error.info) in
    Obj.repr(
# 187 "parser.mly"
      ( fun ctx -> TyString )
# 811 "parser.ml"
               : 'AType))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Support.Error.info) in
    Obj.repr(
# 189 "parser.mly"
      ( fun ctx -> TyUnit )
# 818 "parser.ml"
               : 'AType))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Support.Error.info) in
    Obj.repr(
# 191 "parser.mly"
      ( fun ctx -> TyFloat )
# 825 "parser.ml"
               : 'AType))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Support.Error.info) in
    Obj.repr(
# 193 "parser.mly"
      ( fun ctx -> TyNat )
# 832 "parser.ml"
               : 'AType))
; (fun __caml_parser_env ->
    Obj.repr(
# 197 "parser.mly"
      ( fun ctx -> TyVarBind )
# 838 "parser.ml"
               : 'TyBinder))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'Type) in
    Obj.repr(
# 199 "parser.mly"
      ( fun ctx -> TyAbbBind(_2 ctx) )
# 846 "parser.ml"
               : 'TyBinder))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'AType) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'ArrowType) in
    Obj.repr(
# 205 "parser.mly"
     ( fun ctx -> TyArr(_1 ctx, _3 ctx) )
# 855 "parser.ml"
               : 'ArrowType))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'AType) in
    Obj.repr(
# 207 "parser.mly"
            ( _1 )
# 862 "parser.ml"
               : 'ArrowType))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'AppTerm) in
    Obj.repr(
# 211 "parser.mly"
      ( _1 )
# 869 "parser.ml"
               : 'Term))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 4 : string Support.Error.withinfo) in
    let _3 = (Parsing.peek_val __caml_parser_env 3 : Support.Error.info) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'Type) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'Term) in
    Obj.repr(
# 213 "parser.mly"
      ( fun ctx ->
          let ctx1 = addname ctx _2.v in
          TmAbs(_1, _2.v, _4 ctx, _6 ctx1) )
# 883 "parser.ml"
               : 'Term))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 4 : Support.Error.info) in
    let _3 = (Parsing.peek_val __caml_parser_env 3 : Support.Error.info) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'Type) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'Term) in
    Obj.repr(
# 217 "parser.mly"
      ( fun ctx ->
          let ctx1 = addname ctx "_" in
          TmAbs(_1, "_", _4 ctx, _6 ctx1) )
# 897 "parser.ml"
               : 'Term))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 4 : 'Term) in
    let _3 = (Parsing.peek_val __caml_parser_env 3 : Support.Error.info) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'Term) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'Term) in
    Obj.repr(
# 221 "parser.mly"
      ( fun ctx -> TmIf(_1, _2 ctx, _4 ctx, _6 ctx) )
# 909 "parser.ml"
               : 'Term))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 4 : string Support.Error.withinfo) in
    let _3 = (Parsing.peek_val __caml_parser_env 3 : Support.Error.info) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'Term) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'Term) in
    Obj.repr(
# 223 "parser.mly"
      ( fun ctx -> TmLet(_1, _2.v, _4 ctx, _6 (addname ctx _2.v)) )
# 921 "parser.ml"
               : 'Term))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 4 : Support.Error.info) in
    let _3 = (Parsing.peek_val __caml_parser_env 3 : Support.Error.info) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'Term) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'Term) in
    Obj.repr(
# 225 "parser.mly"
      ( fun ctx -> TmLet(_1, "_", _4 ctx, _6 (addname ctx "_")) )
# 933 "parser.ml"
               : 'Term))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 7 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 6 : string Support.Error.withinfo) in
    let _3 = (Parsing.peek_val __caml_parser_env 5 : Support.Error.info) in
    let _4 = (Parsing.peek_val __caml_parser_env 4 : 'Type) in
    let _5 = (Parsing.peek_val __caml_parser_env 3 : Support.Error.info) in
    let _6 = (Parsing.peek_val __caml_parser_env 2 : 'Term) in
    let _7 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _8 = (Parsing.peek_val __caml_parser_env 0 : 'Term) in
    Obj.repr(
# 227 "parser.mly"
      ( fun ctx -> 
          let ctx1 = addname ctx _2.v in 
          TmLet(_1, _2.v, TmFix(_1, TmAbs(_1, _2.v, _4 ctx, _6 ctx1)),
                _8 ctx1) )
# 950 "parser.ml"
               : 'Term))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'Term) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'Cases) in
    Obj.repr(
# 232 "parser.mly"
      ( fun ctx ->
          TmCase(_1, _2 ctx, _4 ctx) )
# 961 "parser.ml"
               : 'Term))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'AppTerm) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'AppTerm) in
    Obj.repr(
# 235 "parser.mly"
      ( fun ctx -> TmAssign(_2, _1 ctx, _3 ctx) )
# 970 "parser.ml"
               : 'Term))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'PathTerm) in
    Obj.repr(
# 239 "parser.mly"
      ( _1 )
# 977 "parser.ml"
               : 'AppTerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'AppTerm) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'PathTerm) in
    Obj.repr(
# 241 "parser.mly"
      ( fun ctx ->
          let e1 = _1 ctx in
          let e2 = _2 ctx in
          TmApp(tmInfo e1,e1,e2) )
# 988 "parser.ml"
               : 'AppTerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'PathTerm) in
    Obj.repr(
# 246 "parser.mly"
      ( fun ctx ->
          TmFix(_1, _2 ctx) )
# 997 "parser.ml"
               : 'AppTerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'PathTerm) in
    Obj.repr(
# 249 "parser.mly"
      ( fun ctx -> TmRef(_1, _2 ctx) )
# 1005 "parser.ml"
               : 'AppTerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'PathTerm) in
    Obj.repr(
# 251 "parser.mly"
      ( fun ctx -> TmDeref(_1, _2 ctx) )
# 1013 "parser.ml"
               : 'AppTerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'PathTerm) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'PathTerm) in
    Obj.repr(
# 253 "parser.mly"
      ( fun ctx -> TmTimesfloat(_1, _2 ctx, _3 ctx) )
# 1022 "parser.ml"
               : 'AppTerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'PathTerm) in
    Obj.repr(
# 255 "parser.mly"
      ( fun ctx -> TmSucc(_1, _2 ctx) )
# 1030 "parser.ml"
               : 'AppTerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'PathTerm) in
    Obj.repr(
# 257 "parser.mly"
      ( fun ctx -> TmPred(_1, _2 ctx) )
# 1038 "parser.ml"
               : 'AppTerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'PathTerm) in
    Obj.repr(
# 259 "parser.mly"
      ( fun ctx -> TmIsZero(_1, _2 ctx) )
# 1046 "parser.ml"
               : 'AppTerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'PathTerm) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string Support.Error.withinfo) in
    Obj.repr(
# 263 "parser.mly"
      ( fun ctx ->
          TmProj(_2, _1 ctx, _3.v) )
# 1056 "parser.ml"
               : 'PathTerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'PathTerm) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : int Support.Error.withinfo) in
    Obj.repr(
# 266 "parser.mly"
      ( fun ctx ->
          TmProj(_2, _1 ctx, string_of_int _3.v) )
# 1066 "parser.ml"
               : 'PathTerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'AscribeTerm) in
    Obj.repr(
# 269 "parser.mly"
      ( _1 )
# 1073 "parser.ml"
               : 'PathTerm))
; (fun __caml_parser_env ->
    Obj.repr(
# 273 "parser.mly"
      ( fun ctx i -> [] )
# 1079 "parser.ml"
               : 'FieldTypes))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'NEFieldTypes) in
    Obj.repr(
# 275 "parser.mly"
      ( _1 )
# 1086 "parser.ml"
               : 'FieldTypes))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'FieldType) in
    Obj.repr(
# 279 "parser.mly"
      ( fun ctx i -> [_1 ctx i] )
# 1093 "parser.ml"
               : 'NEFieldTypes))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'FieldType) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'NEFieldTypes) in
    Obj.repr(
# 281 "parser.mly"
      ( fun ctx i -> (_1 ctx i) :: (_3 ctx (i+1)) )
# 1102 "parser.ml"
               : 'NEFieldTypes))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string Support.Error.withinfo) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'Type) in
    Obj.repr(
# 285 "parser.mly"
      ( fun ctx i -> (_1.v, _3 ctx) )
# 1111 "parser.ml"
               : 'FieldType))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'Type) in
    Obj.repr(
# 287 "parser.mly"
      ( fun ctx i -> (string_of_int i, _1 ctx) )
# 1118 "parser.ml"
               : 'FieldType))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'ATerm) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'Type) in
    Obj.repr(
# 291 "parser.mly"
      ( fun ctx -> TmAscribe(_2, _1 ctx, _3 ctx) )
# 1127 "parser.ml"
               : 'AscribeTerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'ATerm) in
    Obj.repr(
# 293 "parser.mly"
      ( _1 )
# 1134 "parser.ml"
               : 'AscribeTerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'Term) in
    Obj.repr(
# 297 "parser.mly"
      ( _1 )
# 1141 "parser.ml"
               : 'TermSeq))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'Term) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'TermSeq) in
    Obj.repr(
# 299 "parser.mly"
      ( fun ctx ->
          TmApp(_2, TmAbs(_2, "_", TyUnit, _3 (addname ctx "_")), _1 ctx) )
# 1151 "parser.ml"
               : 'TermSeq))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'TermSeq) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Support.Error.info) in
    Obj.repr(
# 305 "parser.mly"
      ( _2 )
# 1160 "parser.ml"
               : 'ATerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : Support.Error.info) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'Type) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : Support.Error.info) in
    Obj.repr(
# 307 "parser.mly"
      ( fun ctx -> TmInert(_1, _3 ctx) )
# 1170 "parser.ml"
               : 'ATerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string Support.Error.withinfo) in
    Obj.repr(
# 309 "parser.mly"
      ( fun ctx ->
          TmVar(_1.i, name2index _1.i ctx _1.v, ctxlength ctx) )
# 1178 "parser.ml"
               : 'ATerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Support.Error.info) in
    Obj.repr(
# 312 "parser.mly"
      ( fun ctx -> TmTrue(_1) )
# 1185 "parser.ml"
               : 'ATerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Support.Error.info) in
    Obj.repr(
# 314 "parser.mly"
      ( fun ctx -> TmFalse(_1) )
# 1192 "parser.ml"
               : 'ATerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'Fields) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Support.Error.info) in
    Obj.repr(
# 316 "parser.mly"
      ( fun ctx ->
          TmRecord(_1, _2 ctx 1) )
# 1202 "parser.ml"
               : 'ATerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 6 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 5 : string Support.Error.withinfo) in
    let _3 = (Parsing.peek_val __caml_parser_env 4 : Support.Error.info) in
    let _4 = (Parsing.peek_val __caml_parser_env 3 : 'Term) in
    let _5 = (Parsing.peek_val __caml_parser_env 2 : Support.Error.info) in
    let _6 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : 'Type) in
    Obj.repr(
# 319 "parser.mly"
      ( fun ctx ->
          TmTag(_1, _2.v, _4 ctx, _7 ctx) )
# 1216 "parser.ml"
               : 'ATerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string Support.Error.withinfo) in
    Obj.repr(
# 322 "parser.mly"
      ( fun ctx -> TmString(_1.i, _1.v) )
# 1223 "parser.ml"
               : 'ATerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Support.Error.info) in
    Obj.repr(
# 324 "parser.mly"
      ( fun ctx -> TmUnit(_1) )
# 1230 "parser.ml"
               : 'ATerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : float Support.Error.withinfo) in
    Obj.repr(
# 326 "parser.mly"
      ( fun ctx -> TmFloat(_1.i, _1.v) )
# 1237 "parser.ml"
               : 'ATerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int Support.Error.withinfo) in
    Obj.repr(
# 328 "parser.mly"
      ( fun ctx ->
          let rec f n = match n with
              0 -> TmZero(_1.i)
            | n -> TmSucc(_1.i, f (n-1))
          in f _1.v )
# 1248 "parser.ml"
               : 'ATerm))
; (fun __caml_parser_env ->
    Obj.repr(
# 336 "parser.mly"
      ( fun ctx i -> [] )
# 1254 "parser.ml"
               : 'Fields))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'NEFields) in
    Obj.repr(
# 338 "parser.mly"
      ( _1 )
# 1261 "parser.ml"
               : 'Fields))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'Field) in
    Obj.repr(
# 342 "parser.mly"
      ( fun ctx i -> [_1 ctx i] )
# 1268 "parser.ml"
               : 'NEFields))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'Field) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'NEFields) in
    Obj.repr(
# 344 "parser.mly"
      ( fun ctx i -> (_1 ctx i) :: (_3 ctx (i+1)) )
# 1277 "parser.ml"
               : 'NEFields))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string Support.Error.withinfo) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'Term) in
    Obj.repr(
# 348 "parser.mly"
      ( fun ctx i -> (_1.v, _3 ctx) )
# 1286 "parser.ml"
               : 'Field))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'Term) in
    Obj.repr(
# 350 "parser.mly"
      ( fun ctx i -> (string_of_int i, _1 ctx) )
# 1293 "parser.ml"
               : 'Field))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'Case) in
    Obj.repr(
# 354 "parser.mly"
      ( fun ctx -> [_1 ctx] )
# 1300 "parser.ml"
               : 'Cases))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'Case) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'Cases) in
    Obj.repr(
# 356 "parser.mly"
      ( fun ctx -> (_1 ctx) :: (_3 ctx) )
# 1309 "parser.ml"
               : 'Cases))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 6 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 5 : string Support.Error.withinfo) in
    let _3 = (Parsing.peek_val __caml_parser_env 4 : Support.Error.info) in
    let _4 = (Parsing.peek_val __caml_parser_env 3 : string Support.Error.withinfo) in
    let _5 = (Parsing.peek_val __caml_parser_env 2 : Support.Error.info) in
    let _6 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : 'AppTerm) in
    Obj.repr(
# 360 "parser.mly"
      ( fun ctx ->
          let ctx1 = addname ctx _4.v in
          (_2.v, (_4.v, _7 ctx1)) )
# 1324 "parser.ml"
               : 'Case))
(* Entry toplevel *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let toplevel (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf :  Syntax.context -> (Syntax.command list * Syntax.context) )
